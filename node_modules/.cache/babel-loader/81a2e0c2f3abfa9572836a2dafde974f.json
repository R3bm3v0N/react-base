{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer } from 'deox';\nimport { loginSuccess } from './pages/Login/redux/actions';\nimport login from './pages/Login/redux/reducers';\nimport license from './pages/License/redux/reducers';\nimport Cookies from 'universal-cookie';\nvar sessionDefaultState = {\n  jwt: undefined,\n  email: undefined,\n  userDisplayName: undefined\n};\nvar sessionReducer = createReducer(sessionDefaultState, function (handleAction) {\n  return [handleAction(loginSuccess, function (state, _ref) {\n    var payload = _ref.payload;\n    var cookies = new Cookies();\n    cookies.set('jwt', payload.jwt, {\n      path: '/',\n      httpOnly: true\n    });\n    return {\n      jwt: payload.jwt,\n      email: payload.email,\n      userDisplayName: payload.userDisplayName\n    };\n  })];\n});\nexport default combineReducers({\n  session: sessionReducer,\n  page: combineReducers({\n    login: login,\n    license: license\n  })\n});","map":{"version":3,"sources":["D:\\ppp\\react-base\\src\\app\\rootReducer.ts"],"names":["combineReducers","createReducer","loginSuccess","login","license","Cookies","sessionDefaultState","jwt","undefined","email","userDisplayName","sessionReducer","handleAction","state","payload","cookies","set","path","httpOnly","session","page"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,SAAQC,YAAR,QAA2B,6BAA3B;AAEA,OAAOC,KAAP,MAAyC,8BAAzC;AACA,OAAOC,OAAP,MAA6C,gCAA7C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAgBA,IAAMC,mBAAkC,GAAG;AACzCC,EAAAA,GAAG,EAAEC,SADoC;AAEzCC,EAAAA,KAAK,EAAED,SAFkC;AAGzCE,EAAAA,eAAe,EAAEF;AAHwB,CAA3C;AAMA,IAAMG,cAAc,GAAGV,aAAa,CAACK,mBAAD,EAAsB,UAACM,YAAD;AAAA,SAAkB,CAC1EA,YAAY,CAACV,YAAD,EAAe,UAACW,KAAD,QAA8B;AAAA,QAApBC,OAAoB,QAApBA,OAAoB;AACvD,QAAIC,OAAO,GAAG,IAAIV,OAAJ,EAAd;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,OAAO,CAACP,GAA3B,EAAgC;AAAEU,MAAAA,IAAI,EAAE,GAAR;AAAcC,MAAAA,QAAQ,EAAE;AAAxB,KAAhC;AACA,WAAQ;AACNX,MAAAA,GAAG,EAAEO,OAAO,CAACP,GADP;AAENE,MAAAA,KAAK,EAAEK,OAAO,CAACL,KAFT;AAGNC,MAAAA,eAAe,EAAEI,OAAO,CAACJ;AAHnB,KAAR;AAKH,GARa,CAD8D,CAAlB;AAAA,CAAtB,CAApC;AAYA,eAAeV,eAAe,CAAC;AAC7BmB,EAAAA,OAAO,EAAER,cADoB;AAE7BS,EAAAA,IAAI,EAAEpB,eAAe,CAAC;AACpBG,IAAAA,KAAK,EAALA,KADoB;AAEpBC,IAAAA,OAAO,EAAPA;AAFoB,GAAD;AAFQ,CAAD,CAA9B","sourcesContent":["import {combineReducers} from 'redux';\r\nimport { createReducer } from 'deox'\r\nimport {loginSuccess} from './pages/Login/redux/actions'\r\n\r\nimport login, {State as LoginState} from './pages/Login/redux/reducers'\r\nimport license, {State as LicenseState} from './pages/License/redux/reducers'\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nexport type SessionState = {\r\n    jwt?: string,\r\n    email?: string,\r\n    userDisplayName?: string\r\n}\r\nexport type State = {\r\n  session: SessionState,\r\n  page: {\r\n    login: LoginState,\r\n    license: LicenseState\r\n  }\r\n}\r\n\r\nconst sessionDefaultState : SessionState = {\r\n  jwt: undefined,\r\n  email: undefined,\r\n  userDisplayName: undefined\r\n}\r\n\r\nconst sessionReducer = createReducer(sessionDefaultState, (handleAction) => [\r\n  handleAction(loginSuccess, (state, { payload } : any) => {\r\n    let cookies = new Cookies();\r\n    cookies.set('jwt', payload.jwt, { path: '/' , httpOnly: true, });\r\n    return ({\r\n      jwt: payload.jwt,\r\n      email: payload.email,\r\n      userDisplayName: payload.userDisplayName\r\n    })\r\n}),\r\n]);\r\n\r\nexport default combineReducers({\r\n  session: sessionReducer,\r\n  page: combineReducers({\r\n    login,\r\n    license,\r\n  }),\r\n})"]},"metadata":{},"sourceType":"module"}