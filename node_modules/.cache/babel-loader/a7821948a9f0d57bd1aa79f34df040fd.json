{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\ppp\\\\react-base\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\ppp\\\\react-base\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport http from './http';\nimport * as qs from 'qs';\nexport var fetch =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(filters) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(filters);\n            _context.next = 3;\n            return http.get(\"/device\".concat(qs.stringify(filters, {\n              addQueryPrefix: true\n            })));\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data.payload);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetch(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:\\ppp\\react-base\\src\\app\\services\\device.ts"],"names":["http","qs","fetch","filters","console","log","get","stringify","addQueryPrefix","response","data","payload"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAGA,OAAO,IAAMC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AADmB;AAAA,mBAEIH,IAAI,CAACM,GAAL,kBAAmBL,EAAE,CAACM,SAAH,CAAaJ,OAAb,EAAsB;AAACK,cAAAA,cAAc,EAAE;AAAjB,aAAtB,CAAnB,EAFJ;;AAAA;AAEbC,YAAAA,QAFa;AAAA,6CAGZA,QAAQ,CAACC,IAAT,CAAcC,OAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALT,KAAK;AAAA;AAAA;AAAA,GAAX","sourcesContent":["import http from './http';\r\nimport * as qs from 'qs';\r\n\r\n\r\nexport const fetch = async (filters: any) => {\r\n  console.log(filters)\r\n  const response = await http.get(`/device${qs.stringify(filters, {addQueryPrefix: true})}`);\r\n  return response.data.payload;\r\n}"]},"metadata":{},"sourceType":"module"}