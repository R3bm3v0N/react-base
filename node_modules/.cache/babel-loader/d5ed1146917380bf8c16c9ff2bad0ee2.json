{"ast":null,"code":"import { createReducer } from 'deox';\nimport * as actions from './actions';\nimport update from 'immutability-helper';\nvar fetch = actions.fetch,\n    fetchSuccess = actions.fetchSuccess,\n    fetchError = actions.fetchError,\n    insert = actions.insert,\n    insertSuccess = actions.insertSuccess,\n    insertError = actions.insertError;\nvar defaultState = {\n  fetch: {\n    status: undefined\n  },\n  insert: {\n    status: undefined\n  }\n};\nexport default createReducer(defaultState, function (handleAction) {\n  return [handleAction(fetch, function (state, action) {\n    return update(state, {\n      fetch: {\n        status: {\n          $set: 'pending'\n        }\n      }\n    });\n  }), handleAction(fetchSuccess, function (state, action) {\n    return update(state, {\n      fetch: {\n        status: {\n          $set: 'success'\n        }\n      }\n    });\n  }), handleAction(fetchError, function (state, action) {\n    return update(state, {\n      fetch: {\n        status: {\n          $set: 'error'\n        },\n        error: {\n          $set: action.payload\n        }\n      }\n    });\n  }), handleAction(insert, function (state, action) {\n    return update(state, {\n      insert: {\n        status: {\n          $set: 'pending'\n        }\n      }\n    });\n  }), handleAction(insertSuccess, function (state, action) {\n    return update(state, {\n      insert: {\n        status: {\n          $set: 'success'\n        }\n      }\n    });\n  }), handleAction(insertError, function (state, action) {\n    return update(state, {\n      insert: {\n        status: {\n          $set: 'error'\n        },\n        error: {\n          $set: action.payload\n        }\n      }\n    });\n  })];\n});","map":{"version":3,"sources":["D:\\ppp\\react-base\\src\\app\\pages\\License\\redux\\reducers.ts"],"names":["createReducer","actions","update","fetch","fetchSuccess","fetchError","insert","insertSuccess","insertError","defaultState","status","undefined","handleAction","state","action","$set","error","payload"],"mappings":"AAAA,SAASA,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;IAGEC,K,GAMEF,O,CANFE,K;IACAC,Y,GAKEH,O,CALFG,Y;IACAC,U,GAIEJ,O,CAJFI,U;IACAC,M,GAGEL,O,CAHFK,M;IACAC,a,GAEEN,O,CAFFM,a;IACAC,W,GACEP,O,CADFO,W;AAoBF,IAAMC,YAAmB,GAAG;AAC1BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,MAAM,EAAEC;AADH,GADmB;AAI1BL,EAAAA,MAAM,EAAE;AACNI,IAAAA,MAAM,EAAEC;AADF;AAJkB,CAA5B;AASA,eAAeX,aAAa,CAACS,YAAD,EAAe,UAACG,YAAD;AAAA,SAAkB,CAC3DA,YAAY,CAACT,KAAD,EAAQ,UAACU,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AACzDV,MAAAA,KAAK,EAAE;AACLO,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR;AADH;AADkD,KAAR,CAA/B;AAAA,GAAR,CAD+C,EAO3DH,YAAY,CAACR,YAAD,EAAe,UAACS,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AAChEV,MAAAA,KAAK,EAAE;AACLO,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR;AADH;AADyD,KAAR,CAA/B;AAAA,GAAf,CAP+C,EAY3DH,YAAY,CAACP,UAAD,EAAa,UAACQ,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AAC9DV,MAAAA,KAAK,EAAE;AACLO,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR,SADH;AAELC,QAAAA,KAAK,EAAE;AAAED,UAAAA,IAAI,EAAED,MAAM,CAACG;AAAf;AAFF;AADuD,KAAR,CAA/B;AAAA,GAAb,CAZ+C,EAoB3DL,YAAY,CAACN,MAAD,EAAS,UAACO,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AAC1DP,MAAAA,MAAM,EAAE;AACNI,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR;AADF;AADkD,KAAR,CAA/B;AAAA,GAAT,CApB+C,EA0B3DH,YAAY,CAACL,aAAD,EAAgB,UAACM,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AACjEP,MAAAA,MAAM,EAAE;AACNI,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR;AADF;AADyD,KAAR,CAA/B;AAAA,GAAhB,CA1B+C,EA+B3DH,YAAY,CAACJ,WAAD,EAAc,UAACK,KAAD,EAAQC,MAAR;AAAA,WAAyBZ,MAAM,CAACW,KAAD,EAAQ;AAC/DP,MAAAA,MAAM,EAAE;AACNI,QAAAA,MAAM,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR,SADF;AAENC,QAAAA,KAAK,EAAE;AAAED,UAAAA,IAAI,EAAED,MAAM,CAACG;AAAf;AAFD;AADuD,KAAR,CAA/B;AAAA,GAAd,CA/B+C,CAAlB;AAAA,CAAf,CAA5B","sourcesContent":["import { createReducer } from 'deox';\r\nimport * as actions from './actions';\r\nimport update from 'immutability-helper';\r\n\r\nconst { \r\n  fetch,\r\n  fetchSuccess,\r\n  fetchError,\r\n  insert,\r\n  insertSuccess,\r\n  insertError,\r\n} = actions;\r\n\r\nexport type State = {\r\n  fetch?: {\r\n    status: string,\r\n    error?: {\r\n      code: string,\r\n      message: string\r\n    }\r\n  },\r\n  insert?: {\r\n    status: string,\r\n    error?: {\r\n      code: string,\r\n      message: string\r\n    }\r\n  }\r\n}\r\n\r\nconst defaultState: State = {\r\n  fetch: {\r\n    status: undefined,\r\n  },\r\n  insert: {\r\n    status: undefined,\r\n  }\r\n}\r\n\r\nexport default createReducer(defaultState, (handleAction) => [\r\n  handleAction(fetch, (state, action : any) => update(state, {\r\n    fetch: {\r\n      status: { $set: 'pending'}\r\n    }\r\n  })),\r\n\r\n  handleAction(fetchSuccess, (state, action : any) => update(state, {\r\n    fetch: {\r\n      status: { $set: 'success'}\r\n    }\r\n  })),\r\n  handleAction(fetchError, (state, action : any) => update(state, {\r\n    fetch: {\r\n      status: { $set: 'error' },\r\n      error: { $set: action.payload }\r\n    }\r\n  })),\r\n\r\n\r\n  handleAction(insert, (state, action : any) => update(state, {\r\n    insert: {\r\n      status: { $set: 'pending'}\r\n    }\r\n  })),\r\n\r\n  handleAction(insertSuccess, (state, action : any) => update(state, {\r\n    insert: {\r\n      status: { $set: 'success'}\r\n    }\r\n  })),\r\n  handleAction(insertError, (state, action : any) => update(state, {\r\n    insert: {\r\n      status: { $set: 'error' },\r\n      error: { $set: action.payload }\r\n    }\r\n  })),\r\n]);"]},"metadata":{},"sourceType":"module"}