{"ast":null,"code":"import { of, from } from 'rxjs';\nimport { map, mergeMap, catchError } from \"rxjs/operators\";\nimport { ofType } from \"redux-observable\";\nexport var loadEpics = function loadEpics(loadedEpic) {\n  var actionTypes = Object.keys(loadedEpic.default);\n  return actionTypes.map(function (actionType) {\n    return function (action$) {\n      return action$.pipe(ofType(actionType), mergeMap(function (action) {\n        return from(loadedEpic.default[actionType].api(action.payload)).pipe( // map(response => {console.log(response); return response}),\n        map(function (response) {\n          var json = response.data;\n\n          if (json.success) {\n            // console.log('SUCCESS', json.payload)\n            return loadedEpic.default[actionType].success(json.payload);\n          } else {\n            // console.log('ERROR', json.error)\n            throw json.error;\n          }\n        }), catchError(function (error) {\n          // console.log('___ERROR', error)\n          return of(loadedEpic.default[actionType].error(error));\n        }));\n      }));\n    };\n  });\n}; // export const loadEpics = (loadedEpic) => {\n//   let actionTypes = Object.keys(loadedEpic.default);\n//   return actionTypes.map(actionType => action$ => action$.pipe(\n//     ofType(actionType),\n//     mergeMap((action : any) => from(loadedEpic.default[actionType].api(action.payload).then(response => {\n//       console.log('response', response)\n//       let json = response.data;\n//       if(json.success) {\n//         console.log('SUCCESS', json.payload)\n//         return of(loadedEpic.default[actionType].success(json.payload))\n//       } else {\n//         console.log('ERROR', json.error)\n//         // return loadedEpic.default[actionType].error(json.error)\n//         throw json.error;\n//       }\n//     }).catch(error => {\n//       return loadedEpic.default[actionType].error(error);\n//     }))\n//   )))\n// };","map":{"version":3,"sources":["D:\\ppp\\react-base\\src\\app\\utils\\epicUtils.ts"],"names":["of","from","map","mergeMap","catchError","ofType","loadEpics","loadedEpic","actionTypes","Object","keys","default","actionType","action$","pipe","action","api","payload","response","json","data","success","error"],"mappings":"AAAA,SAASA,EAAT,EAAaC,IAAb,QAAyB,MAAzB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAgB;AACvC,MAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAU,CAACI,OAAvB,CAAlB;AACA,SAAOH,WAAW,CAACN,GAAZ,CAAgB,UAAAU,UAAU;AAAA,WAAI,UAAAC,OAAO;AAAA,aAAIA,OAAO,CAACC,IAAR,CAC9CT,MAAM,CAACO,UAAD,CADwC,EAE9CT,QAAQ,CAAC,UAACY,MAAD;AAAA,eAAkBd,IAAI,CAACM,UAAU,CAACI,OAAX,CAAmBC,UAAnB,EAA+BI,GAA/B,CAAmCD,MAAM,CAACE,OAA1C,CAAD,CAAJ,CAAyDH,IAAzD,EACzB;AAEAZ,QAAAA,GAAG,CAAC,UAACgB,QAAD,EAAoB;AACtB,cAAIC,IAAI,GAAGD,QAAQ,CAACE,IAApB;;AACA,cAAGD,IAAI,CAACE,OAAR,EAAiB;AACf;AACA,mBAAOd,UAAU,CAACI,OAAX,CAAmBC,UAAnB,EAA+BS,OAA/B,CAAuCF,IAAI,CAACF,OAA5C,CAAP;AACD,WAHD,MAGO;AACL;AACA,kBAAME,IAAI,CAACG,KAAX;AACD;AACF,SATE,CAHsB,EAazBlB,UAAU,CAAC,UAACkB,KAAD,EAAW;AACpB;AACA,iBAAOtB,EAAE,CAACO,UAAU,CAACI,OAAX,CAAmBC,UAAnB,EAA+BU,KAA/B,CAAqCA,KAArC,CAAD,CAAT;AACD,SAHS,CAbe,CAAlB;AAAA,OAAD,CAFsC,CAAJ;AAAA,KAAX;AAAA,GAA1B,CAAP;AAsBD,CAxBM,C,CAkCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { of, from } from 'rxjs';\r\nimport { map, mergeMap, catchError } from \"rxjs/operators\";\r\nimport { ofType } from \"redux-observable\";\r\n\r\nexport const loadEpics = (loadedEpic) => {\r\n  let actionTypes = Object.keys(loadedEpic.default);\r\n  return actionTypes.map(actionType => action$ => action$.pipe(\r\n    ofType(actionType),\r\n    mergeMap((action : any) => from(loadedEpic.default[actionType].api(action.payload)).pipe(\r\n      // map(response => {console.log(response); return response}),\r\n      \r\n      map((response : any) => {\r\n        let json = response.data;\r\n        if(json.success) {\r\n          // console.log('SUCCESS', json.payload)\r\n          return loadedEpic.default[actionType].success(json.payload)\r\n        } else {\r\n          // console.log('ERROR', json.error)\r\n          throw json.error;\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        // console.log('___ERROR', error)\r\n        return of(loadedEpic.default[actionType].error(error));\r\n      }),\r\n    ),\r\n    )\r\n  ));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const loadEpics = (loadedEpic) => {\r\n//   let actionTypes = Object.keys(loadedEpic.default);\r\n//   return actionTypes.map(actionType => action$ => action$.pipe(\r\n//     ofType(actionType),\r\n//     mergeMap((action : any) => from(loadedEpic.default[actionType].api(action.payload).then(response => {\r\n//       console.log('response', response)\r\n//       let json = response.data;\r\n//       if(json.success) {\r\n//         console.log('SUCCESS', json.payload)\r\n//         return of(loadedEpic.default[actionType].success(json.payload))\r\n//       } else {\r\n//         console.log('ERROR', json.error)\r\n//         // return loadedEpic.default[actionType].error(json.error)\r\n//         throw json.error;\r\n//       }\r\n//     }).catch(error => {\r\n//       return loadedEpic.default[actionType].error(error);\r\n//     }))\r\n//   )))\r\n// };\r\n    "]},"metadata":{},"sourceType":"module"}