import { Action, AnyAction } from './create-action';
export declare type ActionCreator<T extends AnyAction | string> = T extends AnyAction ? {
    (...args: any[]): T;
    type: T['type'];
    toString(): T['type'];
} : (T extends string ? {
    (...args: any[]): Action<T>;
    type: T;
    toString(): T;
} : never);
/**
 * Flux standard action creator factory
 * @example
 * createActionCreator('[Todo] truncate');
 * @example
 * createActionCreator(
 *   '[Todo] fetch rejected',
 *   resolve => (error: Error) => resolve(error)
 * );
 * @example
 * createActionCreator(
 *   '[Todo] fetch rejected',
 *   resolve => (error: Error, meta?: { status: number }) => resolve(error, meta)
 * )
 * @example
 * createActionCreator(
 *   '[Todo] add',
 *   resolve => (name: string, completed = false) => resolve({ name, completed })
 * )
 * @example
 * createActionCreator(
 *   '[Todo] add',
 *   resolve => (name: string, completed = false) => resolve({ name, completed }, 'Meta data of all todos')
 * )
 *
 */
export declare function createActionCreator<TType extends string, TCallable extends <T>(...args: any[]) => Action<TType> = () => Action<TType>>(type: TType, executor?: (resolve: <Payload = undefined, Meta = undefined>(payload?: Payload, meta?: Meta) => Action<TType, Payload, Meta>) => TCallable): TCallable & {
    type: TType;
    toString(): TType;
};
